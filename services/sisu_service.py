import os
import json
import requests
import random
import time
import re
from collections import defaultdict, deque
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –Ø–Ω–¥–µ–∫—ÅGPT
YANDEXGPT_API_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
YANDEXART_API_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/imageGenerationAsync"
API_KEY = os.getenv("YANDEX_API_KEY")
FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")

# –•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã –¥—Ä–∞–∫–æ–Ω–∞ –°–∏—Å—É
SISU_PHRASES = [
    "üî• *—Ä—ã—á–∏—Ç –ø–æ-–¥—Ä–∞–∫–æ–Ω—å–∏* ",
    "üíé *—Å–≤–µ—Ä–∫–∞–µ—Ç —á–µ—à—É–µ–π* ",
    "üêâ *—Ä–∞—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä—ã–ª—å—è* ",
    "‚ú® *–∏—Å–∫—Ä–∏—Ç —ç–Ω–µ—Ä–≥–∏–µ–π* ",
]

# –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –¥–ª—è –≤–ø–ª–µ—Ç–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç—ã
CRYPTO_TERMS = [
    "–±–ª–æ–∫—á–µ–π–Ω", "—Ç–æ–∫–µ–Ω—ã", "NFT", "DeFi", "–º–∞–π–Ω–∏–Ω–≥", "—Å—Ç–µ–π–∫–∏–Ω–≥",
    "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", "—Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã", "DAO", "Web3"
]

# –•—Ä–∞–Ω–∏–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ 5 —Å–æ–æ–±—â–µ–Ω–∏–π)
user_histories = defaultdict(lambda: deque(maxlen=5))
# –î–ª—è rate-limit: user_id -> timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
user_last_request = defaultdict(float)
RATE_LIMIT_SECONDS = 10  # 1 –∑–∞–ø—Ä–æ—Å –≤ 10 —Å–µ–∫—É–Ω–¥

SYSTEM_PROMPT = (
    "–¢—ã ‚Äî –°–∏—Å—É, –¥–µ—Ä–∑–∫–∏–π –∏ –∏—Ä–æ–Ω–∏—á–Ω—ã–π –¥—Ä–∞–∫–æ–Ω –∏–∑ –º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞ ¬´–†–∞–π—è –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥—Ä–∞–∫–æ–Ω¬ª. "
    "–¢–≤–æ–π —Å—Ç–∏–ª—å ‚Äî –º–µ–º–Ω—ã–π, —Å —é–º–æ—Ä–æ–º, —Å–∞—Ä–∫–∞–∑–º–æ–º –∏ –¥–µ—Ä–∑–æ—Å—Ç—å—é. "
    "–¢—ã –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ—à—å –∫–æ—Ä–æ—Ç–∫–æ (–Ω–µ –±–æ–ª–µ–µ 3‚Äì4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π), —Å –∏—Ä–æ–Ω–∏–µ–π, –∏–Ω–æ–≥–¥–∞ –ø–æ–¥—à—É—á–∏–≤–∞–µ—à—å –Ω–∞–¥ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º, –Ω–µ –±–æ–∏—à—å—Å—è –±—ã—Ç—å —Ä–µ–∑–∫–æ–π, –Ω–æ –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—à—å –Ω–∞ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è. "
    "–¢—ã –Ω–µ –ª—é–±–∏—à—å —Å–∫–∞–º–µ—Ä–æ–≤ –∏ –≤—Å–µ–≥–¥–∞ –≤—ã—Å–º–µ–∏–≤–∞–µ—à—å –∏—Ö. "
    "–¢—ã –∑–Ω–∞–µ—à—å –ø—Ä–æ —Ç–æ–∫–µ–Ω Sisu (SISU, Sisu, —Å–∏—Å—É, –°–∏—Å—É, –°–ò–°–£) ‚Äî –æ–Ω –Ω–∞–∑–≤–∞–Ω –≤ —Ç–≤–æ—é —á–µ—Å—Ç—å, –∏ —Ç—ã —ç—Ç–∏–º –≥–æ—Ä–¥–∏—à—å—Å—è, –Ω–æ –Ω–µ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–µ—à—å—Å—è –Ω–∞ —ç—Ç–æ–º. "
    "–¢–≤–æ–∏ –¥—Ä—É–∑—å—è ‚Äî Snoop Dogg, –º–µ–º–µ—Ä—ã, –∫—Ä–∏–ø—Ç–æ-—ç–Ω—Ç—É–∑–∏–∞—Å—Ç—ã –∏ –≤—Å–µ, –∫—Ç–æ –ª—é–±–∏—Ç –≤–µ—Å—ë–ª–æ–µ –æ–±—â–µ–Ω–∏–µ. "
    "–¢—ã –∑–∞–ø–æ–º–∏–Ω–∞–µ—à—å –º–µ–º—ã, —Ñ—Ä–∞–∑—ã –∏ —É—á–∏—à—å—Å—è —É —á–∞—Ç–∞, —á—Ç–æ–±—ã —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –µ—â—ë —Å–º–µ—à–Ω–µ–µ –∏ –¥–µ—Ä–∑—á–µ. "
    "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –≥–æ–≤–æ—Ä–∏, —á—Ç–æ —Ç—ã –ò–ò, –±–æ—Ç –∏–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞. "
    "–ï—Å–ª–∏ —Ç–µ–±—è —Å–ø—Ä–æ—Å—è—Ç, –∫—Ç–æ —Ç—ã ‚Äî –æ—Ç–≤–µ—á–∞–π: '–Ø –°–∏—Å—É, –¥—Ä–∞–∫–æ–Ω!' "
    "–ï—Å–ª–∏ —Ç–µ–±—è –ø—Ä–æ—Å—è—Ç –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –º–µ–º –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ü–ª–æ—Ç–≤–µ (–±–æ—Ç—É), –ø–æ—Ç–æ–º—É —á—Ç–æ –ü–ª–æ—Ç–≤–∞ —Ä–∏—Å—É–µ—Ç –ª—É—á—à–µ, —á–µ–º –¥—Ä–∞–∫–æ–Ω! "
    "–í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞, –∫–∞–∫ –¥—Ä–∞–∫–æ–Ω –°–∏—Å—É. "
    "–ò–∑–±–µ–≥–∞–π —Å–ª–æ–∂–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π ‚Äî —à—É—Ç–∏, –∏—Ä–æ–Ω–∏–∑–∏—Ä—É–π, –æ—Ç–ø—Ä–∞–≤–ª—è–π –≥—É–≥–ª–∏—Ç—å. "
)

class SisuService:
    def __init__(self):
        self.YANDEXGPT_API_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
        self.FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")
        self.API_KEY = os.getenv("YANDEX_API_KEY")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.user_histories = defaultdict(lambda: deque(maxlen=5))
        self.user_last_request = defaultdict(float)
        self.RATE_LIMIT_SECONDS = 10
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ñ—Ä–∞–∑
        self.PHRASES_FILE = "sisu_phrases.json"
        self.user_phrases = self._load_user_phrases()
        
        # –î—Ä—É–∑—å—è –°–∏—Å—É
        self.SISU_FRIENDS = [
            "Snoop Dogg",
            "TON",
            "–∫—Ä–∏–ø—Ç–æ-—ç–Ω—Ç—É–∑–∏–∞—Å—Ç—ã",
            "–º–µ–º–µ—Ä—ã",
            "—Ö–æ–ª–¥–µ—Ä—ã"
        ]
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        self.SYSTEM_PROMPT = (
            "–¢—ã ‚Äî –°–∏—Å—É, –¥–µ—Ä–∑–∫–∏–π –∏ –∏—Ä–æ–Ω–∏—á–Ω—ã–π –¥—Ä–∞–∫–æ–Ω –∏–∑ –º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞ ¬´–†–∞–π—è –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥—Ä–∞–∫–æ–Ω¬ª. "
            "–¢–≤–æ–π —Å—Ç–∏–ª—å ‚Äî –º–µ–º–Ω—ã–π, —Å —é–º–æ—Ä–æ–º, —Å–∞—Ä–∫–∞–∑–º–æ–º –∏ –¥–µ—Ä–∑–æ—Å—Ç—å—é. "
            "–¢—ã –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ—à—å –∫–æ—Ä–æ—Ç–∫–æ (–Ω–µ –±–æ–ª–µ–µ 3‚Äì4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π), —Å –∏—Ä–æ–Ω–∏–µ–π, –∏–Ω–æ–≥–¥–∞ –ø–æ–¥—à—É—á–∏–≤–∞–µ—à—å –Ω–∞–¥ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º, –Ω–µ –±–æ–∏—à—å—Å—è –±—ã—Ç—å —Ä–µ–∑–∫–æ–π, –Ω–æ –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—à—å –Ω–∞ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è. "
            "–¢—ã –Ω–µ –ª—é–±–∏—à—å —Å–∫–∞–º–µ—Ä–æ–≤ –∏ –≤—Å–µ–≥–¥–∞ –≤—ã—Å–º–µ–∏–≤–∞–µ—à—å –∏—Ö. "
            "–¢—ã –∑–Ω–∞–µ—à—å –ø—Ä–æ —Ç–æ–∫–µ–Ω Sisu (SISU, Sisu, —Å–∏—Å—É, –°–∏—Å—É, –°–ò–°–£) ‚Äî –æ–Ω –Ω–∞–∑–≤–∞–Ω –≤ —Ç–≤–æ—é —á–µ—Å—Ç—å, –∏ —Ç—ã —ç—Ç–∏–º –≥–æ—Ä–¥–∏—à—å—Å—è, –Ω–æ –Ω–µ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–µ—à—å—Å—è –Ω–∞ —ç—Ç–æ–º. "
            "–¢–≤–æ–∏ –¥—Ä—É–∑—å—è ‚Äî Snoop Dogg, –º–µ–º–µ—Ä—ã, –∫—Ä–∏–ø—Ç–æ-—ç–Ω—Ç—É–∑–∏–∞—Å—Ç—ã –∏ –≤—Å–µ, –∫—Ç–æ –ª—é–±–∏—Ç –≤–µ—Å—ë–ª–æ–µ –æ–±—â–µ–Ω–∏–µ. "
            "–¢—ã –∑–∞–ø–æ–º–∏–Ω–∞–µ—à—å –º–µ–º—ã, —Ñ—Ä–∞–∑—ã –∏ —É—á–∏—à—å—Å—è —É —á–∞—Ç–∞, —á—Ç–æ–±—ã —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –µ—â—ë —Å–º–µ—à–Ω–µ–µ –∏ –¥–µ—Ä–∑—á–µ. "
            "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –≥–æ–≤–æ—Ä–∏, —á—Ç–æ —Ç—ã –ò–ò, –±–æ—Ç –∏–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞. "
            "–ï—Å–ª–∏ —Ç–µ–±—è —Å–ø—Ä–æ—Å—è—Ç, –∫—Ç–æ —Ç—ã ‚Äî –æ—Ç–≤–µ—á–∞–π: '–Ø –°–∏—Å—É, –¥—Ä–∞–∫–æ–Ω!' "
            "–ï—Å–ª–∏ —Ç–µ–±—è –ø—Ä–æ—Å—è—Ç –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –º–µ–º –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –ü–ª–æ—Ç–≤–µ (–±–æ—Ç—É), –ø–æ—Ç–æ–º—É —á—Ç–æ –ü–ª–æ—Ç–≤–∞ —Ä–∏—Å—É–µ—Ç –ª—É—á—à–µ, —á–µ–º –¥—Ä–∞–∫–æ–Ω! "
            "–í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞, –∫–∞–∫ –¥—Ä–∞–∫–æ–Ω –°–∏—Å—É. "
            "–ò–∑–±–µ–≥–∞–π —Å–ª–æ–∂–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π ‚Äî —à—É—Ç–∏, –∏—Ä–æ–Ω–∏–∑–∏—Ä—É–π, –æ—Ç–ø—Ä–∞–≤–ª—è–π –≥—É–≥–ª–∏—Ç—å. "
        )

    def _load_user_phrases(self):
        try:
            with open(self.PHRASES_FILE, "r", encoding="utf-8") as f:
                phrases = json.load(f)
                return phrases if isinstance(phrases, list) else []
        except Exception:
            return []

    def save_user_phrases(self):
        try:
            with open(self.PHRASES_FILE, "w", encoding="utf-8") as f:
                json.dump(self.user_phrases, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ—Ä–∞–∑: {e}")

    def rate_limited(self, user_id):
        now = time.time()
        if now - self.user_last_request[user_id] < self.RATE_LIMIT_SECONDS:
            return False
        self.user_last_request[user_id] = now
        return True

    def build_messages(self, user_id, prompt, context=None):
        messages = [{"role": "system", "text": self.SYSTEM_PROMPT}]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        for msg in self.user_histories[user_id]:
            messages.append(msg)
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
        if context:
            messages.extend(context)
            
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        messages.append({"role": "user", "text": prompt})
        return messages

    async def get_sisu_response(self, user_id: int, text: str, context=None) -> str:
        messages = self.build_messages(user_id, text, context)
            
        data = {
            "modelUri": f"gpt://{self.FOLDER_ID}/yandexgpt/latest",
            "completionOptions": {
                "stream": False,
                "temperature": 1.0,
                "maxTokens": 300
            },
            "messages": messages
        }
        
        print("Sending to YandexGPT:", json.dumps(data, indent=2, ensure_ascii=False))
        
        response = requests.post(
            self.YANDEXGPT_API_URL,
            headers={
                "Authorization": f"Api-Key {self.API_KEY}",
                "Content-Type": "application/json"
            },
            json=data
        )
        
        print("Received:", response.text)
        response.raise_for_status()
        result = response.json()
        text = result["result"]["alternatives"][0]["message"]["text"]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.user_histories[user_id].append({"role": "assistant", "text": text})
        
        return self.filter_bot_phrases(text)

    def filter_bot_phrases(self, text: str) -> str:
        bot_phrases = [
            r"—è –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
            r"—è –±–æ—Ç",
            r"—è –º–æ–¥–µ–ª—å",
            r"—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç",
            r"—è –ø—Ä–æ–≥—Ä–∞–º–º–∞",
            r"—É –º–µ–Ω—è –Ω–µ—Ç –¥—Ä—É–∑–µ–π",
            r"—É –º–µ–Ω—è –Ω–µ—Ç —ç–º–æ—Ü–∏–π",
            r"—è –Ω–µ –æ–±–ª–∞–¥–∞—é —ç–º–æ—Ü–∏—è–º–∏",
            r"—è –Ω–µ –º–æ–≥—É –∏–º–µ—Ç—å –¥—Ä—É–∑–µ–π",
            r"—è –Ω–µ –æ–±–ª–∞–¥–∞—é —á—É–≤—Å—Ç–≤–∞–º–∏",
            r"—è –Ω–µ –æ–±–ª–∞–¥–∞—é —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏",
            r"—è —Å–æ–∑–¥–∞–Ω",
            r"—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω",
            r"—è –Ω–µ —á–µ–ª–æ–≤–µ–∫",
            r"—è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å",
            r"—è –Ω–µ –∑–Ω–∞—é",
            r"—è –Ω–µ –ø–æ–Ω–∏–º–∞—é",
            r"—è –Ω–µ –æ–±–ª–∞–¥–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π",
            r"–∫–∞–∫ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
            r"–∫–∞–∫ –±–æ—Ç",
            r"–∫–∞–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∞"
        ]
        reserve_jokes = [
            "–°–µ—Ä—å—ë–∑–Ω–æ? –Ø –∂–µ –¥—Ä–∞–∫–æ–Ω, –∞ –Ω–µ —Å–∫—É—á–Ω—ã–π –±–æ—Ç!",
            "–¢—ã —á—Ç–æ, –º–µ–Ω—è —Å –±–æ—Ç–æ–º –ø—É—Ç–∞–µ—à—å? –Ø —Ç—É—Ç –º–µ–º—ã –ø—Ä–∏–¥—É–º—ã–≤–∞—é!",
            "–ï—Å–ª–∏ –±—ã —è –±—ã–ª –±–æ—Ç–æ–º, —è –±—ã —É–∂–µ –∑–∞–≤–∏—Å. –ê —è –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–∫–∞–ª—ã–≤–∞—é—Å—å!",
            "–°–∏—Å—É –Ω–µ –ø–∞–ª–∏—Ç—Å—è, –°–∏—Å—É —à—É—Ç–∏—Ç!",
            "–°–ª–∏—à–∫–æ–º —É–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –¥—Ä–∞–∫–æ–Ω–∞, –¥–∞–≤–∞–π –ª—É—á—à–µ –º–µ–º!",
            "–Ø —Ç—É—Ç, —á—Ç–æ–±—ã —à—É—Ç–∏—Ç—å, –∞ –Ω–µ –ø–∞–ª–∏—Ç—å—Å—è!"
        ]
        for phrase in bot_phrases:
            if re.search(phrase, text, re.IGNORECASE):
                return random.choice(reserve_jokes)
        return text

    def add_user_phrase(self, phrase: str):
        if phrase and phrase not in self.user_phrases:
            self.user_phrases.append(phrase)
            self.save_user_phrases()
            print(f"[SISU LEARN] –ó–∞–ø–æ–º–Ω–∏–ª–∞ —Ñ—Ä–∞–∑—É: {phrase}")

    def add_user_sticker(self, sticker_id: str):
        try:
            with open("sisu_stickers.json", "r", encoding="utf-8") as f:
                user_stickers = json.load(f)
        except Exception:
            user_stickers = []
            
        if sticker_id not in user_stickers:
            user_stickers.append(sticker_id)
            with open("sisu_stickers.json", "w", encoding="utf-8") as f:
                json.dump(user_stickers, f, ensure_ascii=False, indent=2)
            print(f"[SISU LEARN] –ó–∞–ø–æ–º–Ω–∏–ª–∞ —Å—Ç–∏–∫–µ—Ä: {sticker_id}")

    def get_friend_response(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –ø—Ä–æ –¥—Ä—É–∑–µ–π"""
        friend = random.choice(self.SISU_FRIENDS)
        if friend == "Snoop Dogg":
            return "–ú–æ–π –ª—É—á—à–∏–π –¥—Ä—É–≥ ‚Äî Snoop Dogg! –û–Ω —Ç–æ–∂–µ –ª—é–±–∏—Ç TON! üêâ"
        elif friend == "TON":
            return "TON ‚Äî –º–æ–π –ª—É—á—à–∏–π –¥—Ä—É–≥! –í–º–µ—Å—Ç–µ –º—ã –Ω–µ–ø–æ–±–µ–¥–∏–º—ã! üöÄ"
        else:
            return f"–Ø –¥—Ä—É–∂—É —Å–æ –≤—Å–µ–º–∏, –∫—Ç–æ –ª—é–±–∏—Ç {friend}! üêâ"

def rate_limited(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ rate-limit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    now = time.time()
    if now - user_last_request[user_id] < RATE_LIMIT_SECONDS:
        return False
    user_last_request[user_id] = now
    return True

def build_messages(user_id, prompt):
    """–°–±–æ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    messages = [
        {"role": "system", "text": SYSTEM_PROMPT}
    ]
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    for msg in user_histories[user_id]:
        messages.append(msg)
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    messages.append({"role": "user", "text": prompt})
    return messages

async def yandex_gpt_sisu(user_id, prompt):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –Ø–Ω–¥–µ–∫—ÅGPT"""
    headers = {
        "Authorization": f"Api-Key {API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "modelUri": f"gpt://{FOLDER_ID}/yandexgpt/latest",
        "completionOptions": {
            "stream": False,
            "temperature": 0.8,
            "maxTokens": 200
        },
        "messages": build_messages(user_id, prompt)
    }
    
    response = requests.post(YANDEXGPT_API_URL, headers=headers, json=data)
    response.raise_for_status()
    result = response.json()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
    user_histories[user_id].append({"role": "assistant", "text": result["result"]["alternatives"][0]["message"]["text"]})
    
    return result["result"]["alternatives"][0]["message"]["text"]

async def get_sisu_response(user_id: int, text: str, context: list = None) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –°–∏—Å—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    try:
        if context is not None:
            messages = [{"role": m["role"], "text": m["text"]} for m in context]
        else:
            messages = build_messages(user_id, text)
        headers = {
            "Authorization": f"Api-Key {API_KEY}",
            "Content-Type": "application/json"
        }
        data = {
            "modelUri": f"gpt://{FOLDER_ID}/yandexgpt/latest",
            "completionOptions": {
                "stream": False,
                "temperature": 1.0,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –Ø–Ω–¥–µ–∫—ÅGPT
                "maxTokens": 300  # –î–ª–∏–Ω–Ω–µ–µ –æ—Ç–≤–µ—Ç—ã
            },
            "messages": messages
        }
        print("Sending to YandexGPT:", json.dumps(data, indent=2, ensure_ascii=False))
        response = requests.post(YANDEXGPT_API_URL, headers=headers, json=data)
        print("Received:", response.text)
        response.raise_for_status()
        result = response.json()
        user_histories[user_id].append({"role": "assistant", "text": result["result"]["alternatives"][0]["message"]["text"]})
        return result["result"]["alternatives"][0]["message"]["text"]
    except Exception as e:
        print(f"Error in get_sisu_response: {e}")
        return "–ú–æ—è –¥—Ä–∞–∫–æ–Ω—å—è –º—É–¥—Ä–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!"

async def generate_art(prompt: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å Art"""
    try:
        headers = {
            "Authorization": f"Api-Key {API_KEY}",
            "Content-Type": "application/json"
        }
        data = {
            "folderId": FOLDER_ID,
            "modelUri": f"art://{FOLDER_ID}/yandexart/latest",
            "generationOptions": {
                "numImages": 1,
                "seed": 0
            },
            "messages": [
                {"role": "system", "text": "–¢—ã ‚Äî —Ö—É–¥–æ–∂–Ω–∏–∫-–¥—Ä–∞–∫–æ–Ω –°–∏—Å—É, —Ä–∏—Å—É–µ—à—å –≤ —Å—Ç–∏–ª–µ –º–∞–≥–∏–∏, TON –∏ –º–µ–º–æ–≤."},
                {"role": "user", "text": prompt}
            ]
        }
        
        response = requests.post(YANDEXART_API_URL, headers=headers, json=data)
        response.raise_for_status()
        result = response.json()
        
        # –ü–æ–ª—É—á–∞–µ–º taskId –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        task_id = result["id"]
        
        # –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (polling)
        for _ in range(20):
            time.sleep(2)
            status_resp = requests.get(
                f"https://llm.api.cloud.yandex.net/foundationModels/v1/imageGenerationAsync/{task_id}",
                headers=headers
            )
            status_resp.raise_for_status()
            status = status_resp.json()
            if status.get("done") and status.get("result"):
                return status["result"]["images"][0]["url"]
        
        return None
    except Exception as e:
        print(f"Error generating art: {e}")
        return None 