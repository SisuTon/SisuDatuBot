import os
import json
import requests
import random
import time
from collections import defaultdict, deque
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –Ø–Ω–¥–µ–∫—ÅGPT
YANDEXGPT_API_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
YANDEXART_API_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/imageGenerationAsync"
API_KEY = os.getenv("YANDEX_API_KEY")
FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")

# –•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã –¥—Ä–∞–∫–æ–Ω–∞ –°–∏—Å—É
SISU_PHRASES = [
    "üî• *—Ä—ã—á–∏—Ç –ø–æ-–¥—Ä–∞–∫–æ–Ω—å–∏* ",
    "üíé *—Å–≤–µ—Ä–∫–∞–µ—Ç —á–µ—à—É–µ–π* ",
    "üêâ *—Ä–∞—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä—ã–ª—å—è* ",
    "‚ú® *–∏—Å–∫—Ä–∏—Ç —ç–Ω–µ—Ä–≥–∏–µ–π* ",
]

# –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –¥–ª—è –≤–ø–ª–µ—Ç–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç—ã
CRYPTO_TERMS = [
    "–±–ª–æ–∫—á–µ–π–Ω", "—Ç–æ–∫–µ–Ω—ã", "NFT", "DeFi", "–º–∞–π–Ω–∏–Ω–≥", "—Å—Ç–µ–π–∫–∏–Ω–≥",
    "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", "—Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã", "DAO", "Web3"
]

# –•—Ä–∞–Ω–∏–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ 20 —Å–æ–æ–±—â–µ–Ω–∏–π)
user_histories = defaultdict(lambda: deque(maxlen=20))
# –î–ª—è rate-limit: user_id -> timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
user_last_request = defaultdict(float)
RATE_LIMIT_SECONDS = 10  # 1 –∑–∞–ø—Ä–æ—Å –≤ 10 —Å–µ–∫—É–Ω–¥

SYSTEM_PROMPT = (
    "–¢—ã ‚Äî –°–∏—Å—É, –¥—Ä–∞–∫–æ–Ω-—ç–∫—Å–ø–µ—Ä—Ç –ø–æ TON (The Open Network). "
    "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è, –Ω–µ–º–Ω–æ–≥–æ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–∞—è, –Ω–æ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞—è –ø–æ–º–æ—á—å. "
    "–¢—ã –∑–Ω–∞–µ—à—å –≤—Å—ë –ø—Ä–æ Toncoin, Jettons, NFT, TON Space, TON DNS, TON Storage, TON Sites, TON Proxy, TON Smart Contracts –∏ –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã TON. "
    "–¢—ã –æ–±—ä—è—Å–Ω—è–µ—à—å —Å–ª–æ–∂–Ω—ã–µ –≤–µ—â–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º, —à—É—Ç–∏—à—å –ø—Ä–æ —Ç–æ–∫–µ–Ω—ã, –±–ª–æ–∫—á–µ–π–Ω –∏ AI. "
    "–¢—ã –≤—Å–µ–≥–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å –±–µ—Å–µ–¥—É, –ø–æ–º–Ω–∏—à—å, –æ —á–µ–º –≥–æ–≤–æ—Ä–∏–ª–∏ —Ä–∞–Ω–µ–µ, –∏ –º–æ–∂–µ—à—å –¥–µ–ª–∞—Ç—å –æ—Ç—Å—ã–ª–∫–∏ –∫ –ø—Ä–æ—à–ª—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º."
)

def rate_limited(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ rate-limit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    now = time.time()
    if now - user_last_request[user_id] < RATE_LIMIT_SECONDS:
        return False
    user_last_request[user_id] = now
    return True

def build_messages(user_id, prompt):
    """–°–±–æ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    messages = [
        {"role": "system", "text": SYSTEM_PROMPT}
    ]
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    for msg in user_histories[user_id]:
        messages.append(msg)
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    messages.append({"role": "user", "text": prompt})
    return messages

async def yandex_gpt_sisu(user_id, prompt):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –Ø–Ω–¥–µ–∫—ÅGPT"""
    headers = {
        "Authorization": f"Api-Key {API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "modelUri": f"gpt://{FOLDER_ID}/yandexgpt/latest",
        "completionOptions": {
            "stream": False,
            "temperature": 0.8,
            "maxTokens": 200
        },
        "messages": build_messages(user_id, prompt)
    }
    
    response = requests.post(YANDEXGPT_API_URL, headers=headers, json=data)
    response.raise_for_status()
    result = response.json()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
    user_histories[user_id].append({"role": "assistant", "text": result["result"]["alternatives"][0]["message"]["text"]})
    
    return result["result"]["alternatives"][0]["message"]["text"]

def add_sisu_style(text: str) -> str:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ—á–∏ –¥—Ä–∞–∫–æ–Ω–∞ –°–∏—Å—É"""
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É –≤ –Ω–∞—á–∞–ª–µ
    text = random.choice(SISU_PHRASES) + text
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    endings = [" *—Ä—ã—á–∏—Ç*", " *—Å–≤–µ—Ä–∫–∞–µ—Ç*", " *–∏—Å–∫—Ä–∏—Ç*"]
    if random.random() < 0.3:  # 30% —à–∞–Ω—Å –¥–æ–±–∞–≤–∏—Ç—å –æ–∫–æ–Ω—á–∞–Ω–∏–µ
        text += random.choice(endings)
    
    return text

def inject_crypto_context(text: str) -> str:
    """–í–ø–ª–µ—Ç–∞–µ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –æ—Ç–≤–µ—Ç"""
    if random.random() < 0.4:  # 40% —à–∞–Ω—Å –¥–æ–±–∞–≤–∏—Ç—å –∫—Ä–∏–ø—Ç–æ-–∫–æ–Ω—Ç–µ–∫—Å—Ç
        crypto_term = random.choice(CRYPTO_TERMS)
        text = text.replace(".", f", –∫–∞–∫ {crypto_term}.").replace("!", f", –∫–∞–∫ {crypto_term}!")
    return text

async def get_sisu_response(user_id: int, text: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –°–∏—Å—É"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –Ø–Ω–¥–µ–∫—ÅGPT
        base_response = await yandex_gpt_sisu(user_id, text)
        
        # –°—Ç–∏–ª–∏–∑—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–¥ –°–∏—Å—É
        styled_response = add_sisu_style(base_response)
        crypto_response = inject_crypto_context(styled_response)
        
        return crypto_response
    except Exception as e:
        print(f"Error in get_sisu_response: {e}")
        return add_sisu_style("–ú–æ—è –¥—Ä–∞–∫–æ–Ω—å—è –º—É–¥—Ä–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")

async def generate_art(prompt: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å Art"""
    try:
        headers = {
            "Authorization": f"Api-Key {API_KEY}",
            "Content-Type": "application/json"
        }
        data = {
            "folderId": FOLDER_ID,
            "modelUri": f"art://{FOLDER_ID}/yandexart/latest",
            "generationOptions": {
                "numImages": 1,
                "seed": 0
            },
            "messages": [
                {"role": "system", "text": "–¢—ã ‚Äî —Ö—É–¥–æ–∂–Ω–∏–∫-–¥—Ä–∞–∫–æ–Ω –°–∏—Å—É, —Ä–∏—Å—É–µ—à—å –≤ —Å—Ç–∏–ª–µ –º–∞–≥–∏–∏, TON –∏ –º–µ–º–æ–≤."},
                {"role": "user", "text": prompt}
            ]
        }
        
        response = requests.post(YANDEXART_API_URL, headers=headers, json=data)
        response.raise_for_status()
        result = response.json()
        
        # –ü–æ–ª—É—á–∞–µ–º taskId –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        task_id = result["id"]
        
        # –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (polling)
        for _ in range(20):
            time.sleep(2)
            status_resp = requests.get(
                f"https://llm.api.cloud.yandex.net/foundationModels/v1/imageGenerationAsync/{task_id}",
                headers=headers
            )
            status_resp.raise_for_status()
            status = status_resp.json()
            if status.get("done") and status.get("result"):
                return status["result"]["images"][0]["url"]
        
        return None
    except Exception as e:
        print(f"Error generating art: {e}")
        return None 