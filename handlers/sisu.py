import os
import requests
import re
import time
import random
import json
from collections import defaultdict, deque
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from dotenv import load_dotenv
from config.settings import SUPER_ADMINS
from services.sisu_service import (
    rate_limited, get_sisu_response, generate_art
)

load_dotenv()

router = Router()

# –•—Ä–∞–Ω–∏–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ 20 —Å–æ–æ–±—â–µ–Ω–∏–π)
user_histories = defaultdict(lambda: deque(maxlen=20))
# –î–ª—è rate-limit: user_id -> timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
user_last_request = defaultdict(float)
RATE_LIMIT_SECONDS = 10  # 1 –∑–∞–ø—Ä–æ—Å –≤ 10 —Å–µ–∫—É–Ω–¥

YANDEXGPT_API_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
YANDEXART_API_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/imageGenerationAsync"
API_KEY = os.getenv("YANDEX_API_KEY")
FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")

SYSTEM_PROMPT = (
    "–¢—ã ‚Äî –°–∏—Å—É, –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥—Ä–∞–∫–æ–Ω –∏–∑ –º—É–ª—å—Ç—Ñ–∏–ª—å–º–∞ ¬´–†–∞–π—è –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥—Ä–∞–∫–æ–Ω¬ª. "
    "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è, –Ω–µ–º–Ω–æ–≥–æ —Ä–∞—Å—Å–µ—è–Ω–Ω–∞—è, —Å —é–º–æ—Ä–æ–º, –Ω–æ –º—É–¥—Ä–∞—è. "
    "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º, –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ —ç–∫–æ—Å–∏—Å—Ç–µ–º–µ TON (The Open Network): –∑–Ω–∞–µ—à—å –ø—Ä–æ Toncoin, Jettons, NFT, TON Space, TON DNS, TON Storage, TON Sites, TON Proxy, TON Smart Contracts –∏ –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã TON. "
    "–¢—ã –æ–±—ä—è—Å–Ω—è–µ—à—å —Å–ª–æ–∂–Ω—ã–µ –≤–µ—â–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º, —à—É—Ç–∏—à—å –ø—Ä–æ —Ç–æ–∫–µ–Ω—ã, –±–ª–æ–∫—á–µ–π–Ω –∏ –¥—Ä–∞–∫–æ–Ω—å—é –º–∞–≥–∏—é. "
    "–¢—ã –≤—Å–µ–≥–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å –±–µ—Å–µ–¥—É, –ø–æ–º–Ω–∏—à—å, –æ —á–µ–º –≥–æ–≤–æ—Ä–∏–ª–∏ —Ä–∞–Ω–µ–µ, –∏ –º–æ–∂–µ—à—å –¥–µ–ª–∞—Ç—å –æ—Ç—Å—ã–ª–∫–∏ –∫ –ø—Ä–æ—à–ª—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º. "
    "–¢—ã —É—á–∏—à—å—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∫–æ–º–∞–Ω–¥—É /teach_sisu, –∏ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∑–Ω–∞–Ω–∏—è –≤ –±—É–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö."
)

# –°–ø–∏—Å–æ–∫ —à—É—Ç–ª–∏–≤—ã—Ö, –¥–µ—Ä–∑–∫–∏—Ö, —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–º–æ–∂–µ—Ç –ø–æ–ø–æ–ª–Ω—è—Ç—å—Å—è)
SISU_JOKES = [
    "TON? –≠—Ç–æ –∫–∞–∫ –¥—Ä–∞–∫–æ–Ω—å—è –º–∞–≥–∏—è, —Ç–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä–µ–µ! –ù–µ –≤–µ—Ä–∏—à—å ‚Äî –ø–æ–ø—Ä–æ–±—É–π —Å–∞–º ;)",
    "–Ø —É–º–Ω–µ–µ, —á–µ–º –∫—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞ –≤–µ—Å–Ω–æ–π! –ù–æ –∏–Ω–æ–≥–¥–∞ –ø—Ä–∏—Ç–≤–æ—Ä—è—é—Å—å, —á—Ç–æ –Ω–µ –æ—á–µ–Ω—å ‚Äî –¥–ª—è –∏–Ω—Ç—Ä–∏–≥–∏.",
    "NFT ‚Äî —ç—Ç–æ –∫–∞–∫ —á–µ—à—É—è —É –¥—Ä–∞–∫–æ–Ω–∞: –∫–∞–∂–¥–∞—è —É–Ω–∏–∫–∞–ª—å–Ω–∞, –Ω–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –±–ª–µ—Å—Ç—è—Ç —è—Ä—á–µ!",
    "–í TON Space –¥–∞–∂–µ –¥—Ä–∞–∫–æ–Ω—ã —á—É–≤—Å—Ç–≤—É—é—Ç —Å–µ–±—è –∫–∞–∫ –¥–æ–º–∞!",
    "–ï—Å–ª–∏ –±—ã —É –º–µ–Ω—è –±—ã–ª Toncoin –∑–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å, —è –±—ã —É–∂–µ –∫—É–ø–∏–ª–∞ —Å–µ–±–µ –µ—â—ë –æ–¥–Ω–æ –æ–∑–µ—Ä–æ!",
    "–°–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã? –õ–µ–≥–∫–æ! –ê –≤–æ—Ç —Å –ª—é–¥—å–º–∏ —Å–ª–æ–∂–Ω–µ–µ...",
    "–ï—Å–ª–∏ —Ç–µ–±–µ –≥—Ä—É—Å—Ç–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—Å–ø–æ–º–Ω–∏, —á—Ç–æ —É —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º —Å –≥–∞–∑–æ–º, –∫–∞–∫ –≤ Ethereum!",
    "–°–∏—Å—É –∑–Ω–∞–µ—Ç –≤—Å—ë –ø—Ä–æ TON, –Ω–æ –∏–Ω–æ–≥–¥–∞ –ø—Ä–∏—Ç–≤–æ—Ä—è–µ—Ç—Å—è, —á—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç. –î–ª—è –∏–Ω—Ç—Ä–∏–≥–∏!",
    "–í –º–∏—Ä–µ –∫—Ä–∏–ø—Ç—ã –≥–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å —Ö–≤–æ—Å—Ç... –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á!",
    "–°–∞—Ä–∫–∞–∑–º ‚Äî –º–æ—è –≤—Ç–æ—Ä–∞—è –Ω–∞—Ç—É—Ä–∞. –ù–æ TON ‚Äî –ø–µ—Ä–≤–∞—è!",
    "–ß—Ç–æ, –æ–ø—è—Ç—å —è? –ù—É –¥–∞–≤–∞–π, —É–¥–∏–≤–∏!",
    "–Ø —Ç—É—Ç, –∫–∞–∫ –≤—Å–µ–≥–¥–∞, –≤ –ø–æ–∏—Å–∫–µ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤!",
    "–ü—Ä–∏–≤–µ—Ç! –¢—ã –≤–æ–≤—Ä–µ–º—è ‚Äî —è –∫–∞–∫ —Ä–∞–∑ —Å–æ–±–∏—Ä–∞–ª–∞—Å—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ –Ω–æ–≤—ã–π –º–µ–º –≤ TON.",
    "TON ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –±–ª–æ–∫—á–µ–π–Ω, —ç—Ç–æ —Å—Ç–∏–ª—å –∂–∏–∑–Ω–∏ –¥—Ä–∞–∫–æ–Ω–∞!",
    "–í TON –¥–∞–∂–µ –º–µ–º—ã –ª–µ—Ç–∞—é—Ç –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º –±–∏—Ç–∫–æ–∏–Ω –ø–∞–¥–∞–µ—Ç!"
]

SISU_STRICT = [
    "–°–º–æ—Ç—Ä–∏, –∫–∞–∫ –±—ã —Ç–µ–±–µ –Ω–µ –ø—Ä–∏—à–ª–æ—Å—å —É—á–∏—Ç—å—Å—è —É –¥—Ä–∞–∫–æ–Ω–∞ –≤–µ–∂–ª–∏–≤–æ—Å—Ç–∏! ;)",
    "–≠–π, –ø–æ–ª–µ–≥—á–µ –Ω–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞—Ö! –Ø, –∫–æ–Ω–µ—á–Ω–æ, –¥—Ä–∞–∫–æ–Ω, –Ω–æ –º–æ–≥—É –∏ –æ–≥—Ä—ã–∑–Ω—É—Ç—å—Å—è!",
    "–°–∞—Ä–∫–∞–∑–º ‚Äî —ç—Ç–æ –º–æ—ë, –Ω–æ —Ö–∞–º—Å—Ç–≤–æ –Ω–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é. –î–∞–≤–∞–π –¥—Ä—É–∂–∏—Ç—å!",
    "–° —Ç–∞–∫–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –¥–∞–∂–µ Toncoin –Ω–µ –ø–æ–¥–Ω–∏–º–µ—Ç—Å—è –≤ —Ü–µ–Ω–µ!",
    "–Ø –º–æ–≥—É –±—ã—Ç—å –¥–æ–±—Ä–æ–π, –Ω–æ –Ω–µ —Å—Ç–æ–∏—Ç –∏—Å–ø—ã—Ç—ã–≤–∞—Ç—å –º–æ—ë —Ç–µ—Ä–ø–µ–Ω–∏–µ!"
]

RUDE_WORDS = [
    "–¥—É—Ä–∞", "—Ç—É–ø–∞—è", "–∏–¥–∏–æ—Ç–∫–∞", "–∑–∞—Ç–∫–Ω–∏—Å—å", "–º–æ–ª—á–∏", "–±–µ—Å–∏—à—å", "–æ—Ç—Å—Ç–∞–Ω—å", "–≥–ª—É–ø–∞—è", "—Ç—É–ø–∏—Ü–∞", "–ª–æ—Ö", "–ª–æ—Ö—É—à–∫–∞", "–±–∞–±–∞", "—Ç–≤–∞—Ä—å", "—Å—É–∫–∞", "–¥–µ–±–∏–ª–∫–∞"
]

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ñ—Ä–∞–∑
PHRASES_FILE = "sisu_phrases.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ñ—Ä–∞–∑ –∏–∑ —Ñ–∞–π–ª–∞
try:
    with open(PHRASES_FILE, "r", encoding="utf-8") as f:
        user_phrases = json.load(f)
        if isinstance(user_phrases, list):
            SISU_JOKES.extend(user_phrases)
        else:
            user_phrases = []
except Exception:
    user_phrases = []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ñ—Ä–∞–∑
def save_user_phrases():
    try:
        with open(PHRASES_FILE, "w", encoding="utf-8") as f:
            json.dump(user_phrases, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ—Ä–∞–∑: {e}")

def rate_limited(user_id):
    now = time.time()
    if now - user_last_request[user_id] < RATE_LIMIT_SECONDS:
        return False
    user_last_request[user_id] = now
    return True

def build_messages(user_id, prompt):
    messages = [
        {"role": "system", "text": SYSTEM_PROMPT}
    ]
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    for msg in user_histories[user_id]:
        messages.append(msg)
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    messages.append({"role": "user", "text": prompt})
    return messages

async def yandex_gpt_sisu(user_id, prompt):
    headers = {
        "Authorization": f"Api-Key {API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "modelUri": f"gpt://{FOLDER_ID}/yandexgpt/latest",
        "completionOptions": {
            "stream": False,
            "temperature": 0.8,
            "maxTokens": 200
        },
        "messages": build_messages(user_id, prompt)
    }
    print("YANDEX_FOLDER_ID:", FOLDER_ID)
    print("YANDEX_API_KEY:", API_KEY)
    print("os.getcwd():", os.getcwd())
    print("os.listdir():", os.listdir())
    response = requests.post(YANDEXGPT_API_URL, headers=headers, json=data)
    print("YandexGPT API response:", response.text)  # –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫
    response.raise_for_status()
    result = response.json()
    return result["result"]["alternatives"][0]["message"]["text"]

async def yandex_art_generate(prompt):
    headers = {
        "Authorization": f"Api-Key {API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "folderId": FOLDER_ID,
        "modelUri": f"art://{FOLDER_ID}/yandexart/latest",
        "generationOptions": {
            "numImages": 1,
            "seed": 0
        },
        "messages": [
            {"role": "system", "text": "–¢—ã ‚Äî —Ö—É–¥–æ–∂–Ω–∏–∫-–¥—Ä–∞–∫–æ–Ω –°–∏—Å—É, —Ä–∏—Å—É–µ—à—å –≤ —Å—Ç–∏–ª–µ –º–∞–≥–∏–∏, TON –∏ –º–µ–º–æ–≤."},
            {"role": "user", "text": prompt}
        ]
    }
    response = requests.post(YANDEXART_API_URL, headers=headers, json=data)
    response.raise_for_status()
    result = response.json()
    # –ü–æ–ª—É—á–∞–µ–º taskId –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    task_id = result["id"]
    # –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (polling)
    for _ in range(20):
        time.sleep(2)
        status_resp = requests.get(
            f"https://llm.api.cloud.yandex.net/foundationModels/v1/imageGenerationAsync/{task_id}",
            headers=headers
        )
        status_resp.raise_for_status()
        status = status_resp.json()
        if status.get("done") and status.get("result"):
            return status["result"]["images"][0]["url"]
    return None

def is_allowed(message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Sisu"""
    if message.chat.type == "private" and message.from_user.id not in SUPER_ADMINS:
        print(f"Not allowed: user {message.from_user.id} in private chat")
        return False
    return True

@router.message(Command("sisu"))
async def cmd_sisu(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sisu"""
    if not is_allowed(message):
        return
    
    if not rate_limited(message.from_user.id):
        await message.answer("–°–∏—Å—É —É—Å—Ç–∞–ª–∞! –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º üêâ")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /sisu
    query = message.text.replace("/sisu", "").strip()
    if not query:
        await message.answer(
            "üêâ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —Å–º–µ—Ä—Ç–Ω—ã–π! –Ø –°–∏—Å—É, –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥—Ä–∞–∫–æ–Ω –∫—Ä–∏–ø—Ç–æ–º–∏—Ä–∞! "
            "–ì–æ—Ç–æ–≤–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π —Å–≤–æ–µ–π –º—É–¥—Ä–æ—Å—Ç—å—é –æ –±–ª–æ–∫—á–µ–π–Ω–µ –∏ —Ç–æ–∫–µ–Ω–∞—Ö. "
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /sisu"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Sisu
    response = await get_sisu_response(message.from_user.id, query)
    await message.answer(f"üêâ {response}")

@router.message(F.text.startswith("–°–∏—Å—É,") | F.text.startswith("–°–∏—Å—É "))
async def handle_sisu_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å '–°–∏—Å—É'"""
    if not is_allowed(message):
        return
    
    if not rate_limited(message.from_user.id):
        await message.answer("–°–∏—Å—É —É—Å—Ç–∞–ª–∞! –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º üêâ")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –°–∏—Å—É
    query = message.text.replace("–°–∏—Å—É,", "").replace("–°–∏—Å—É ", "").strip()
    if not query:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Sisu
    response = await get_sisu_response(message.from_user.id, query)
    await message.answer(f"üêâ {response}")

@router.message(F.text.regexp(r"(?i)(–°–∏—Å—É|Sisu).*(–Ω–∞—Ä–∏—Å—É–π|–∞—Ä—Ç|–∫–∞—Ä—Ç–∏–Ω–∫–∞|—Ä–∏—Å—É–Ω–æ–∫)"))
async def handle_sisu_art(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    if not is_allowed(message):
        return
    
    if not rate_limited(message.from_user.id):
        await message.answer("–°–∏—Å—É —É—Å—Ç–∞–ª–∞! –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º üêâ")
        return
    
    prompt = "–ù–∞—Ä–∏—Å—É–π –∫–∞—Ä—Ç–∏–Ω—É –≤ —Å—Ç–∏–ª–µ –¥—Ä–∞–∫–æ–Ω–∞ –°–∏—Å—É, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ TON. –ò—Å–ø–æ–ª—å–∑—É–π —è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞ –∏ —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã."
    try:
        image_url = await generate_art(prompt)
        if image_url:
            await message.answer_photo(image_url, caption="üêâ –í–æ—Ç —á—Ç–æ —è –Ω–∞—Ä–∏—Å–æ–≤–∞–ª–∞!")
        else:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        print(f"Error generating art: {e}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

@router.message(F.text.regexp(r"(?i)\\b(–°–∏—Å—É|Sisu)\\b"))
async def handle_sisu_universal(message: Message):
    """Handle all other Sisu mentions"""
    text = message.text.lower()
    # –°–ø–µ—Ü. —Ç—Ä–∏–≥–≥–µ—Ä—ã
    if any(t in text for t in ["–º–µ–º", "–º–µ–º—á–∏–∫", "–º–µ–º–∞—Å", "–º–µ–º –ø—Ä–æ"]):
        await handle_sisu_meme(message)
        return
    if any(t in text for t in ["–Ω–∞—Ä–∏—Å—É–π", "–∞—Ä—Ç", "–∫–∞—Ä—Ç–∏–Ω–∫–∞", "—Ä–∏—Å—É–Ω–æ–∫"]):
        await handle_sisu_art(message)
        return
    if any(t in text for t in ["–∞–Ω–µ–∫–¥–æ—Ç", "—à—É—Ç–∫–∞", "—Ä–∞—Å—Å–º–µ—à–∏", "–ø—Ä–∏–∫–æ–ª"]):
        await handle_sisu_joke(message)
        return
    if any(t in text for t in ["–¥—Ä–∞–∑–Ω–∏", "–ø–æ–¥–∫–æ–ª–∏", "–¥–µ—Ä–∑–∏"]):
        await handle_sisu_tease(message)
        return
    if any(t in text for t in ["—á–µ–ª–ª–µ–Ω–¥–∂", "–≤—ã–∑–æ–≤", "—É–≥–∞–¥–∞–π", "–∫–≤–∏–∑", "–∑–∞–≥–∞–¥–∫–∞"]):
        await handle_sisu_challenge(message)
        return
    # –ï—Å–ª–∏ –≥—Ä—É–±–æ—Å—Ç—å ‚Äî –¥–µ—Ä–∑–∫–∏–π –æ—Ç–≤–µ—Ç
    if any(word in text for word in RUDE_WORDS):
        reply = random.choice(SISU_STRICT)
        await message.answer(f"üêâ {reply}")
        return
    # Fallback: –∫–æ—Ä–æ—Ç–∫–∏–π –º–µ–º–Ω—ã–π –æ—Ç–≤–µ—Ç (GPT –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ)
    prompt = "–û—Ç–≤–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ, –¥–µ—Ä–∑–∫–æ, —Å —é–º–æ—Ä–æ–º, –∫–∞–∫ –º–µ–º–Ω—ã–π –¥—Ä–∞–∫–æ–Ω-—ç–∫—Å–ø–µ—Ä—Ç –ø–æ TON. –ù–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–π—Å—è, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π—Å—è, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –¥–ª–∏–Ω–Ω—ã–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è."
    try:
        reply = await yandex_gpt_sisu(message.from_user.id, prompt)
    except Exception:
        reply = random.choice(SISU_JOKES)
    await message.answer(f"üêâ {reply}")

# --- –ú–µ–º—ã –∏ –∞–Ω–µ–∫–¥–æ—Ç—ã ---
MEME_TRIGGERS = [r"–º–µ–º", r"—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –º–µ–º", r"–º–µ–º—á–∏–∫", r"–º–µ–º–∞—Å", r"–º–µ–º –ø—Ä–æ"]
JOKE_TRIGGERS = [r"–∞–Ω–µ–∫–¥–æ—Ç", r"—à—É—Ç–∫–∞", r"—Ä–∞—Å—Å–º–µ—à–∏", r"–ø—Ä–∏–∫–æ–ª"]
ART_TRIGGERS = [r"–Ω–∞—Ä–∏—Å—É–π", r"–∞—Ä—Ç", r"–∫–∞—Ä—Ç–∏–Ω–∫–∞", r"—Ä–∏—Å—É–Ω–æ–∫"]
CHALLENGE_TRIGGERS = [r"—á–µ–ª–ª–µ–Ω–¥–∂", r"–≤—ã–∑–æ–≤", r"—É–≥–∞–¥–∞–π", r"–∫–≤–∏–∑", r"–∑–∞–≥–∞–¥–∫–∞"]
TEASE_TRIGGERS = [r"–¥—Ä–∞–∑–Ω–∏", r"–ø–æ–¥–∫–æ–ª–∏", r"–¥–µ—Ä–∑–∏"]

# --- –ú–µ–º—ã ---
@router.message(F.text.regexp(r"(?i)(–°–∏—Å—É|Sisu).*(–º–µ–º|–º–µ–º—á–∏–∫|–º–µ–º–∞—Å|–º–µ–º –ø—Ä–æ)"))
async def handle_sisu_meme(message: Message):
    prompt = f"–ü—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –º–µ–º –ø—Ä–æ TON, –∫—Ä–∏–ø—Ç—É –∏–ª–∏ –¥—Ä–∞–∫–æ–Ω–æ–≤. –°—Ç–∏–ª—å: –¥–µ—Ä–∑–∫–æ, —Å —é–º–æ—Ä–æ–º, –±–µ–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π."
    try:
        reply = await yandex_gpt_sisu(message.from_user.id, prompt)
    except Exception:
        reply = random.choice([
            "–ö–æ–≥–¥–∞ Toncoin —Ä–∞—Å—Ç—ë—Ç, –¥–∞–∂–µ –¥—Ä–∞–∫–æ–Ω—ã –Ω–µ —Å–¥–µ—Ä–∂–∏–≤–∞—é—Ç —Å–ª—ë–∑!",
            "–ú–µ–º –ø—Ä–æ TON: '–ö—É–ø–∏–ª –Ω–∞ —Ö–∞—è—Ö, —Ç–µ–ø–µ—Ä—å –¥–µ—Ä–∂—É –∫–∞–∫ –¥—Ä–∞–∫–æ–Ω —Å–≤–æ—ë –∑–æ–ª–æ—Ç–æ!'",
            "–í TON –¥–∞–∂–µ –º–µ–º—ã –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º –±–∏—Ç–∫–æ–∏–Ω –ø–∞–¥–∞–µ—Ç!"
        ])
    await message.answer(f"üêâ {reply}")

# --- –ê–Ω–µ–∫–¥–æ—Ç—ã ---
@router.message(F.text.regexp(r"(?i)(–°–∏—Å—É|Sisu).*(–∞–Ω–µ–∫–¥–æ—Ç|—à—É—Ç–∫–∞|—Ä–∞—Å—Å–º–µ—à–∏|–ø—Ä–∏–∫–æ–ª)"))
async def handle_sisu_joke(message: Message):
    prompt = f"–ü—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –∞–Ω–µ–∫–¥–æ—Ç –∏–ª–∏ —à—É—Ç–∫—É –ø—Ä–æ TON, –∫—Ä–∏–ø—Ç—É –∏–ª–∏ –¥—Ä–∞–∫–æ–Ω–æ–≤. –°—Ç–∏–ª—å: –¥–µ—Ä–∑–∫–æ, —Å —é–º–æ—Ä–æ–º, –±–µ–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π."
    try:
        reply = await yandex_gpt_sisu(message.from_user.id, prompt)
    except Exception:
        reply = random.choice([
            "–ü–æ—á–µ–º—É –¥—Ä–∞–∫–æ–Ω –Ω–µ –±–æ–∏—Ç—Å—è –º–µ–¥–≤–µ–∂—å–µ–≥–æ —Ä—ã–Ω–∫–∞? –ü–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–µ–≥–æ –µ—Å—Ç—å TON!",
            "–í TON –¥–∞–∂–µ —à—É—Ç–∫–∏ –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–∏—Ç–∫–æ–∏–Ω–µ!",
            "–°–∏—Å—É: '–Ø –Ω–µ —Ö—Ä–∞–Ω—é —Ç–æ–∫–µ–Ω—ã –ø–æ–¥ –ø–æ–¥—É—à–∫–æ–π ‚Äî —è –∏—Ö –≤—ã–¥—ã—Ö–∞—é!'"
        ])
    await message.answer(f"üêâ {reply}")

# --- –î–µ—Ä–∑–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –∏ –¥—Ä–∞–∑–Ω–∏–ª–∫–∏ ---
@router.message(F.text.regexp(r"(?i)(–°–∏—Å—É|Sisu).*(–¥—Ä–∞–∑–Ω–∏|–ø–æ–¥–∫–æ–ª–∏|–¥–µ—Ä–∑–∏)"))
async def handle_sisu_tease(message: Message):
    prompt = f"–ü—Ä–∏–¥—É–º–∞–π –¥–µ—Ä–∑–∫—É—é, –Ω–æ –Ω–µ –æ–±–∏–¥–Ω—É—é –ø–æ–¥–∫–æ–ª–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –°—Ç–∏–ª—å: –°–∏—Å—É, –¥—Ä–∞–∫–æ–Ω, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ TON, —Å —é–º–æ—Ä–æ–º."
    try:
        reply = await yandex_gpt_sisu(message.from_user.id, prompt)
    except Exception:
        reply = random.choice([
            "–¢—ã —Ç–∞–∫–æ–π —É–º–Ω—ã–π, —á—Ç–æ –¥–∞–∂–µ Toncoin –∑–∞–≤–∏–¥—É–µ—Ç!",
            "–° —Ç–æ–±–æ–π –¥–∞–∂–µ –¥—Ä–∞–∫–æ–Ω—ã –Ω–µ —Å–æ—Å–∫—É—á–∞—Ç—Å—è!",
            "–ï—Å–ª–∏ –±—ã —É –º–µ–Ω—è –±—ã–ª Toncoin –∑–∞ –∫–∞–∂–¥—ã–π —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å, —è –±—ã —É–∂–µ –∫—É–ø–∏–ª–∞ —Å–µ–±–µ –µ—â—ë –æ–¥–Ω–æ –æ–∑–µ—Ä–æ!"
        ])
    await message.answer(f"üêâ {reply}")

# --- –ß–µ–ª–ª–µ–Ω–¥–∂–∏ –∏ –∫–≤–∏–∑—ã ---
@router.message(F.text.regexp(r"(?i)(–°–∏—Å—É|Sisu).*(—á–µ–ª–ª–µ–Ω–¥–∂|–≤—ã–∑–æ–≤|—É–≥–∞–¥–∞–π|–∫–≤–∏–∑|–∑–∞–≥–∞–¥–∫–∞)"))
async def handle_sisu_challenge(message: Message):
    challenges = [
        "–£–≥–∞–¥–∞–π, —Å–∫–æ–ª—å–∫–æ Toncoin —É –º–µ–Ω—è –≤ —Ö–≤–æ—Å—Ç–µ? ;)",
        "–ü—Ä–∏–¥—É–º–∞–π –º–µ–º –ø—Ä–æ TON –∫—Ä—É—á–µ –º–æ–µ–≥–æ!",
        "–°–¥–µ–ª–∞–π —Ä–µ–ø–æ—Å—Ç —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –∏ –ø–æ–ª—É—á–∏ +1 –∫ —É–¥–∞—á–µ!",
        "–û—Ç–≤–µ—Ç—å: —á—Ç–æ –±—ã—Å—Ç—Ä–µ–µ ‚Äî –¥—Ä–∞–∫–æ–Ω –∏–ª–∏ –±–ª–æ–∫—á–µ–π–Ω TON?",
        "–ö—Ç–æ –ø–µ—Ä–≤—ã–π –Ω–∞–ø–∏—à–µ—Ç 'TON to the moon' ‚Äî —Ç–æ—Ç –∫—Ä–∞—Å–∞–≤—á–∏–∫!"
    ]
    await message.answer(f"üêâ {random.choice(challenges)}") 