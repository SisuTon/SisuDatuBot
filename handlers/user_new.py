from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from config.settings import POINTS_CONFIG, SUPER_ADMINS, REQUIRED_SUBSCRIPTIONS
from config.constants import WELCOME_MESSAGE, PHOTO_PHRASES, VIDEO_PHRASES, TEXT_PHRASES
from database.models import (
    add_user, get_user, add_points, get_top_users,
    add_achievement, get_user_achievements, get_current_task,
    get_subscriptions, update_check_in
)
from keyboards.keyboards import (
    get_main_keyboard, get_subscription_keyboard,
    get_referral_keyboard, get_donate_keyboard,
    get_task_keyboard, get_profile_keyboard,
    get_group_keyboard, get_admin_keyboard
)
import random
from datetime import datetime, timedelta
import re
from collections import defaultdict

router = Router()

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_last_message = defaultdict(datetime)  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
user_message_count = defaultdict(int)      # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥
user_message_history = defaultdict(list)   # –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
SPAM_THRESHOLD = 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥
SPAM_PERIOD = 60    # –ü–µ—Ä–∏–æ–¥ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
MESSAGE_HISTORY_SIZE = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–≤—Ç–æ—Ä–æ–≤

@router.message(F.text == "‚úÖ CHECK-IN")
async def check_in(message: Message):
    """Handle daily check-in"""
    # –ó–∞–ø—Ä–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —á–µ–∫-–∏–Ω–∞ –≤ –ª–∏—á–∫–µ
    if message.chat.type == "private":
        await message.answer("–ß–µ–∫-–∏–Ω –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ!")
        return
    
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start")
        return
    
    points, streak, last_check_in, *_ = user
    now = datetime.now()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ 24-—á–∞—Å–æ–≤–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    if last_check_in:
        last_check = datetime.fromisoformat(last_check_in)
        time_diff = now - last_check
        if time_diff.total_seconds() < 24 * 3600:  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            next_check = last_check + timedelta(hours=24)
            await message.answer(
                f"‚è≥ –í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —á–µ–∫-–∏–Ω!\n–°–ª–µ–¥—É—é—â–∏–π —á–µ–∫-–∏–Ω –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ {next_check.strftime('%d.%m %H:%M')}")
            return
    
    # Add points and update streak
    points_to_add = POINTS_CONFIG["check_in"]["points"]
    await add_points(message.from_user.id, points_to_add)
    new_streak = streak + 1 if streak else 1
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–µ–∫-–∏–Ω–∞ –∏ —Å–µ—Ä–∏—é
    await update_check_in(message.from_user.id, new_streak)
    
    await message.answer(
        f"‚úÖ –ß–µ–∫-–∏–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω!\n+{points_to_add} –±–∞–ª–ª–æ–≤\nüî• –°–µ—Ä–∏—è: {new_streak} –¥–Ω–µ–π"
    ) 