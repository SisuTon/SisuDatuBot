import os
import json
import requests
import random
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from config.settings import BOT_TOKEN
from dotenv import load_dotenv
import re

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

router = Router()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ê–ª–∏—Å—ã
ALICE_API_URL = f"https://dialogs.yandex.net/api/v1/skills/{os.getenv('ALICE_SKILL_ID')}/detectIntent"
ALICE_HEADERS = {
    "Authorization": f"OAuth {os.getenv('ALICE_OAUTH_TOKEN')}",
    "Content-Type": "application/json"
}

# –•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã –¥—Ä–∞–∫–æ–Ω–∞ –°–∏—Å—É
SISU_PHRASES = [
    "üî• *—Ä—ã—á–∏—Ç –ø–æ-–¥—Ä–∞–∫–æ–Ω—å–∏* ",
    "üíé *—Å–≤–µ—Ä–∫–∞–µ—Ç —á–µ—à—É–µ–π* ",
    "üêâ *—Ä–∞—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä—ã–ª—å—è* ",
    "‚ú® *–∏—Å–∫—Ä–∏—Ç —ç–Ω–µ—Ä–≥–∏–µ–π* ",
]

# –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –¥–ª—è –≤–ø–ª–µ—Ç–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç—ã
CRYPTO_TERMS = [
    "–±–ª–æ–∫—á–µ–π–Ω", "—Ç–æ–∫–µ–Ω—ã", "NFT", "DeFi", "–º–∞–π–Ω–∏–Ω–≥", "—Å—Ç–µ–π–∫–∏–Ω–≥",
    "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", "—Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã", "DAO", "Web3"
]

def add_sisu_style(text: str) -> str:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ—á–∏ –¥—Ä–∞–∫–æ–Ω–∞ –°–∏—Å—É"""
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É –≤ –Ω–∞—á–∞–ª–µ
    text = random.choice(SISU_PHRASES) + text
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    endings = [" *—Ä—ã—á–∏—Ç*", " *—Å–≤–µ—Ä–∫–∞–µ—Ç*", " *–∏—Å–∫—Ä–∏—Ç*"]
    if random.random() < 0.3:  # 30% —à–∞–Ω—Å –¥–æ–±–∞–≤–∏—Ç—å –æ–∫–æ–Ω—á–∞–Ω–∏–µ
        text += random.choice(endings)
    
    return text

def inject_crypto_context(text: str) -> str:
    """–í–ø–ª–µ—Ç–∞–µ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –æ—Ç–≤–µ—Ç"""
    if random.random() < 0.4:  # 40% —à–∞–Ω—Å –¥–æ–±–∞–≤–∏—Ç—å –∫—Ä–∏–ø—Ç–æ-–∫–æ–Ω—Ç–µ–∫—Å—Ç
        crypto_term = random.choice(CRYPTO_TERMS)
        text = text.replace(".", f", –∫–∞–∫ {crypto_term}.").replace("!", f", –∫–∞–∫ {crypto_term}!")
    return text

async def get_alice_response(text: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ê–ª–∏—Å—ã –∏ –µ–≥–æ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥ –°–∏—Å—É"""
    try:
        payload = {
            "query": text,
            "lang": "ru-RU",
            "session": {
                "session_id": "sisu_session",
                "user_id": "sisu_user"
            }
        }
        
        response = requests.post(
            ALICE_API_URL,
            headers=ALICE_HEADERS,
            json=payload
        )
        
        if response.status_code == 200:
            data = response.json()
            base_response = data.get("response", {}).get("text", "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.")
            
            # –°—Ç–∏–ª–∏–∑—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–¥ –°–∏—Å—É
            styled_response = add_sisu_style(base_response)
            crypto_response = inject_crypto_context(styled_response)
            
            return crypto_response
        else:
            print(f"Error response from Alice API: {response.text}")
            return add_sisu_style("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–µ–π –¥—Ä–∞–∫–æ–Ω—å–µ–π –º—É–¥—Ä–æ—Å—Ç–∏.")
            
    except Exception as e:
        print(f"Error in get_alice_response: {e}")
        return add_sisu_style("–ú–æ—è –¥—Ä–∞–∫–æ–Ω—å—è –º—É–¥—Ä–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

@router.message(Command("sisu"))
async def cmd_sisu(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sisu –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –¥—Ä–∞–∫–æ–Ω–æ–º –°–∏—Å—É"""
    if not message.text:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /sisu
    query = message.text.replace("/sisu", "").strip()
    if not query:
        await message.answer(
            add_sisu_style(
                "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —Å–º–µ—Ä—Ç–Ω—ã–π! –Ø –°–∏—Å—É, –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥—Ä–∞–∫–æ–Ω –∫—Ä–∏–ø—Ç–æ–º–∏—Ä–∞! "
                "–ì–æ—Ç–æ–≤–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π —Å–≤–æ–µ–π –º—É–¥—Ä–æ—Å—Ç—å—é –æ –±–ª–æ–∫—á–µ–π–Ω–µ –∏ —Ç–æ–∫–µ–Ω–∞—Ö. "
                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /sisu"
            )
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ê–ª–∏—Å—ã –∏ —Å—Ç–∏–ª–∏–∑—É–µ–º –µ–≥–æ
    response = await get_alice_response(query)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∏–º–µ–Ω–∏ –¥—Ä–∞–∫–æ–Ω–∞ –°–∏—Å—É
    await message.answer(
        f"üêâ {response}",
        parse_mode="HTML"
    )

@router.message(F.text.startswith("–°–∏—Å—É,") | F.text.startswith("–°–∏—Å—É "))
async def handle_sisu_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å '–°–∏—Å—É'"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –°–∏—Å—É
    query = message.text.replace("–°–∏—Å—É,", "").replace("–°–∏—Å—É ", "").strip()
    if not query:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ê–ª–∏—Å—ã –∏ —Å—Ç–∏–ª–∏–∑—É–µ–º –µ–≥–æ
    response = await get_alice_response(query)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∏–º–µ–Ω–∏ –¥—Ä–∞–∫–æ–Ω–∞ –°–∏—Å—É
    await message.answer(
        f"üêâ {response}",
        parse_mode="HTML"
    )

@router.message(Command("alice"))
async def cmd_alice(message: Message):
    if not message.text:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /alice
    query = message.text.replace("/alice", "").strip()
    if not query:
        await message.answer(
            add_sisu_style(
                "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —Å–º–µ—Ä—Ç–Ω—ã–π! –Ø –ê–ª–∏—Å–∞, –ø–æ—Å–ª–µ–¥–Ω—è—è –¥—Ä–∞–∫–æ–Ω—å—è –∫—Ä–∏–ø—Ç–æ–º–∏—Ä–∞! "
                "–ì–æ—Ç–æ–≤–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π —Å–≤–æ–µ–π –º—É–¥—Ä–æ—Å—Ç—å—é –æ –±–ª–æ–∫—á–µ–π–Ω–µ –∏ —Ç–æ–∫–µ–Ω–∞—Ö. "
                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /alice"
            )
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ê–ª–∏—Å—ã –∏ —Å—Ç–∏–ª–∏–∑—É–µ–º –µ–≥–æ
    response = await get_alice_response(query)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∏–º–µ–Ω–∏ –¥—Ä–∞–∫–æ–Ω—å–∏ –ê–ª–∏—Å—ã
    await message.answer(
        f"üêâ {response}",
        parse_mode="HTML"
    )

@router.message(F.text.regexp(r"(–ê–ª–∏—Å–∞|Alice)", flags=re.IGNORECASE))
async def handle_alice_anywhere(message: Message):
    if not message.text:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ê–ª–∏—Å–µ
    query = message.text.replace("–ê–ª–∏—Å–∞,", "").replace("–ê–ª–∏—Å–∞ ", "").strip()
    if not query:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ê–ª–∏—Å—ã –∏ —Å—Ç–∏–ª–∏–∑—É–µ–º –µ–≥–æ
    response = await get_alice_response(query)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∏–º–µ–Ω–∏ –¥—Ä–∞–∫–æ–Ω—å–∏ –ê–ª–∏—Å—ã
    await message.answer(
        f"üêâ {response}",
        parse_mode="HTML"
    ) 