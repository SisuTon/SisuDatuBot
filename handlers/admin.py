from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from config.settings import SUPER_ADMINS
from database.models import (
    add_points, get_user, get_top_users, set_daily_task,
    get_current_task, update_subscription, get_subscriptions,
    log_admin_action
)
from keyboards.keyboards import get_admin_keyboard
import aiosqlite
from config.settings import DATABASE_PATH
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import datetime
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import InputMediaPhoto, InputMediaVideo, InputMediaDocument, InlineKeyboardMarkup, InlineKeyboardButton

router = Router()

def is_super_admin(user_id: int) -> bool:
    """Check if user is super admin"""
    return user_id in SUPER_ADMINS

@router.message(Command("admin"))
async def admin_menu(message: Message):
    """Show admin menu"""
    if not is_super_admin(message.from_user.id):
        return
    
    if message.chat.type != "private":
        await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
        return
    
    await message.answer(
        "üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/broadcast - –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
        "/settask - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –¥–Ω—è\n"
        "/list_users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "/addpoints - –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã\n"
        "/setstreak - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–∏—é –¥–Ω–µ–π\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
        "/setsub - –û–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "/maintenance - –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è",
        reply_markup=get_admin_keyboard()
    )

@router.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def broadcast_menu(message: Message, state: FSMContext):
    await broadcast_start(message, state)

@router.message(F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def users_menu(message: Message):
    """Show users menu"""
    if not is_super_admin(message.from_user.id):
        return
    
    if message.chat.type != "private":
        await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
        return
    
    await message.answer(
        "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/list_users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "/addpoints @username amount - –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã\n"
        "/removepoints @username amount - –ó–∞–±—Ä–∞—Ç—å –±–∞–ª–ª—ã\n"
        "/setstreak @username days - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–∏—é –¥–Ω–µ–π\n"
        "/ban @username - –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/unban @username - –†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats_menu(message: Message):
    """Show statistics"""
    if not is_super_admin(message.from_user.id):
        return
    
    if message.chat.type != "private":
        await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
        return
    
    async with aiosqlite.connect(DATABASE_PATH) as db:
        async with db.execute(
            "SELECT COUNT(*), SUM(points), SUM(streak) FROM users"
        ) as cursor:
            row = await cursor.fetchone()
            total_users, total_points, total_streak = row
    
    text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n"
        f"–°—É–º–º–∞—Ä–Ω–æ –±–∞–ª–ª–æ–≤: <b>{total_points or 0:.1f}</b>\n"
        f"–°—É–º–º–∞—Ä–Ω–æ —Å–µ—Ä–∏–π –¥–Ω–µ–π: <b>{total_streak or 0}</b>\n"
    )
    await message.answer(text)

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_menu(message: Message):
    """Show settings menu"""
    if not is_super_admin(message.from_user.id):
        return
    
    if message.chat.type != "private":
        await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
        return
    
    await message.answer(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/setsub type url - –û–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "/maintenance on|off - –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"
    )

@router.message(F.text == "‚úèÔ∏è –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
async def admin_create_task(message: Message, state: FSMContext):
    await set_task_start(message, state)

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def admin_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_admin_keyboard())

class BroadcastStates(StatesGroup):
    waiting_for_content = State()
    waiting_for_confirm = State()

broadcast_data = {}

@router.message(Command("broadcast"))
async def broadcast_start(message: Message, state: FSMContext):
    if not is_super_admin(message.from_user.id):
        return
    if message.chat.type != "private":
        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
        return
    await message.answer("üì¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–¥–ø–∏—Å—å—é).\n–î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /cancel")
    await state.set_state(BroadcastStates.waiting_for_content)

@router.message(BroadcastStates.waiting_for_content)
async def broadcast_preview(message: Message, state: FSMContext):
    if message.text and message.text.startswith("/cancel"):
        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.clear()
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    data = {}
    if message.photo:
        data['type'] = 'photo'
        data['file_id'] = message.photo[-1].file_id
        data['caption'] = message.caption or ''
        preview = await message.answer_photo(data['file_id'], caption=data['caption'])
    elif message.video:
        data['type'] = 'video'
        data['file_id'] = message.video.file_id
        data['caption'] = message.caption or ''
        preview = await message.answer_video(data['file_id'], caption=data['caption'])
    elif message.document:
        data['type'] = 'document'
        data['file_id'] = message.document.file_id
        data['caption'] = message.caption or ''
        preview = await message.answer_document(data['file_id'], caption=data['caption'])
    elif message.text:
        data['type'] = 'text'
        data['text'] = message.text
        preview = await message.answer(data['text'])
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.")
        return
    broadcast_data[message.from_user.id] = data
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º", callback_data="broadcast_confirm")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="broadcast_cancel")]
    ])
    await message.answer("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?", reply_markup=keyboard)
    await state.set_state(BroadcastStates.waiting_for_confirm)

@router.callback_query(BroadcastStates.waiting_for_confirm, F.data == "broadcast_confirm")
async def broadcast_send(callback: CallbackQuery, state: FSMContext):
    if not is_super_admin(callback.from_user.id):
        return
    data = broadcast_data.get(callback.from_user.id)
    if not data:
        await callback.message.edit_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async with aiosqlite.connect(DATABASE_PATH) as db:
        async with db.execute("SELECT user_id FROM users") as cursor:
            user_ids = [row[0] for row in await cursor.fetchall()]
    count = 0
    for uid in user_ids:
        try:
            if data['type'] == 'photo':
                await callback.bot.send_photo(uid, data['file_id'], caption=data['caption'])
            elif data['type'] == 'video':
                await callback.bot.send_video(uid, data['file_id'], caption=data['caption'])
            elif data['type'] == 'document':
                await callback.bot.send_document(uid, data['file_id'], caption=data['caption'])
            elif data['type'] == 'text':
                await callback.bot.send_message(uid, data['text'])
            count += 1
        except:
            pass
    await callback.message.edit_text(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    await state.clear()
    broadcast_data.pop(callback.from_user.id, None)

@router.callback_query(BroadcastStates.waiting_for_confirm, F.data == "broadcast_cancel")
async def broadcast_cancel(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()
    broadcast_data.pop(callback.from_user.id, None)

@router.message(Command("cancel"), BroadcastStates.waiting_for_content)
async def broadcast_cancel_cmd(message: Message, state: FSMContext):
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()
    broadcast_data.pop(message.from_user.id, None)

class TaskStates(StatesGroup):
    waiting_for_content = State()
    waiting_for_points = State()
    waiting_for_publish = State()
    waiting_for_confirm = State()

task_data = {}

@router.message(Command("settask"))
async def set_task_start(message: Message, state: FSMContext):
    if not is_super_admin(message.from_user.id):
        return
    if message.chat.type != "private":
        await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
        return
    await message.answer("‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–Ω—è. –î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /cancel")
    await state.set_state(TaskStates.waiting_for_content)

@router.callback_query(F.data == "task_new")
async def task_new_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–Ω—è. –î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /cancel")
    await state.set_state(TaskStates.waiting_for_content)

@router.message(TaskStates.waiting_for_content)
async def task_points_step(message: Message, state: FSMContext):
    if message.text and message.text.startswith("/cancel"):
        await message.answer("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.clear()
        return
    data = {}
    if message.photo:
        data['type'] = 'photo'
        data['file_id'] = message.photo[-1].file_id
        data['caption'] = message.caption or ''
    elif message.video:
        data['type'] = 'video'
        data['file_id'] = message.video.file_id
        data['caption'] = message.caption or ''
    elif message.document:
        data['type'] = 'document'
        data['file_id'] = message.document.file_id
        data['caption'] = message.caption or ''
    elif message.text:
        data['type'] = 'text'
        data['text'] = message.text
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.")
        return
    task_data[message.from_user.id] = data
    await message.answer("üíé –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è –≤ –±–∞–ª–ª–∞—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
    await state.set_state(TaskStates.waiting_for_points)

@router.message(TaskStates.waiting_for_points)
async def task_publish_step(message: Message, state: FSMContext):
    if message.text and message.text.startswith("/cancel"):
        await message.answer("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.clear()
        task_data.pop(message.from_user.id, None)
        return
    try:
        points = int(message.text)
        if points <= 0:
            raise ValueError
    except Exception:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±–∞–ª–ª–æ–≤.")
        return
    task_data[message.from_user.id]['points'] = points
    # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞–Ω–∏—è —Å –±–∞–ª–ª–∞–º–∏
    data = task_data[message.from_user.id]
    preview_text = f"üêâ <b>–ó–∞–¥–∞–Ω–∏–µ –¥–Ω—è!</b> üó°\n\n"
    if data['type'] == 'text':
        preview_text += f"{data['text']}\n\n"
    else:
        preview_text += f"{data['caption']}\n\n"
    preview_text += f"üíé <b>–ù–∞–≥—Ä–∞–¥–∞:</b> {points} –±–∞–ª–ª–æ–≤"
    if data['type'] == 'photo':
        await message.answer_photo(data['file_id'], caption=preview_text, parse_mode="HTML")
    elif data['type'] == 'video':
        await message.answer_video(data['file_id'], caption=preview_text, parse_mode="HTML")
    elif data['type'] == 'document':
        await message.answer_document(data['file_id'], caption=preview_text, parse_mode="HTML")
    else:
        await message.answer(preview_text, parse_mode="HTML")
    # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–¢–æ–ª—å–∫–æ –≤ –ª–∏—á–∫—É", callback_data="task_personal")],
        [InlineKeyboardButton(text="–í –ª–∏—á–∫—É –∏ –≤ —á–∞—Ç", callback_data="task_both")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="task_cancel")]
    ])
    await message.answer("–ì–¥–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ?", reply_markup=keyboard)
    await state.set_state(TaskStates.waiting_for_publish)

@router.callback_query(TaskStates.waiting_for_publish, F.data.in_(["task_personal", "task_both"]))
async def task_confirm_step(callback: CallbackQuery, state: FSMContext):
    data = task_data.get(callback.from_user.id)
    if not data:
        await callback.message.edit_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    publish_mode = callback.data
    task_data[callback.from_user.id]['publish_mode'] = publish_mode
    # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –¥–Ω—è", callback_data="task_confirm")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="task_cancel")]
    ])
    await callback.message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–¥–∞–Ω–∏—è –¥–Ω—è?", reply_markup=keyboard)
    await state.set_state(TaskStates.waiting_for_confirm)

@router.callback_query(TaskStates.waiting_for_publish, F.data == "task_cancel")
@router.callback_query(TaskStates.waiting_for_confirm, F.data == "task_cancel")
async def task_cancel_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()
    task_data.pop(callback.from_user.id, None)

@router.callback_query(TaskStates.waiting_for_confirm, F.data == "task_confirm")
async def task_confirm_callback(callback: CallbackQuery, state: FSMContext):
    if not is_super_admin(callback.from_user.id):
        return
    data = task_data.get(callback.from_user.id)
    if not data:
        await callback.message.edit_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –¥–Ω—è (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏–ª–∏ caption)
    if data['type'] == 'text':
        task_text = data['text']
    else:
        task_text = data['caption'] or '[–ú–µ–¥–∏–∞-–∑–∞–¥–∞–Ω–∏–µ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏]'
    points = data.get('points', 0)
    await set_daily_task(f"{task_text}\n\nüíé –ù–∞–≥—Ä–∞–¥–∞: {points} –±–∞–ª–ª–æ–≤", callback.from_user.id)
    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ —á–∞—Ç, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ
    if data.get('publish_mode') == 'task_both':
        chat_id = -1002108698927  # —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç
        preview_text = f"üêâ <b>–ó–∞–¥–∞–Ω–∏–µ –¥–Ω—è!</b> üó°\n\n"
        if data['type'] == 'text':
            preview_text += f"{data['text']}\n\n"
        else:
            preview_text += f"{data['caption']}\n\n"
        preview_text += f"üíé <b>–ù–∞–≥—Ä–∞–¥–∞:</b> {points} –±–∞–ª–ª–æ–≤"
        if data['type'] == 'photo':
            await callback.bot.send_photo(chat_id, data['file_id'], caption=preview_text, parse_mode="HTML")
        elif data['type'] == 'video':
            await callback.bot.send_video(chat_id, data['file_id'], caption=preview_text, parse_mode="HTML")
        elif data['type'] == 'document':
            await callback.bot.send_document(chat_id, data['file_id'], caption=preview_text, parse_mode="HTML")
        else:
            await callback.bot.send_message(chat_id, preview_text, parse_mode="HTML")
    await callback.message.edit_text("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –¥–Ω—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.clear()
    task_data.pop(callback.from_user.id, None)
    await log_admin_action(callback.from_user.id, "settask", f"–¢–µ–∫—Å—Ç: {task_text[:100]}")

@router.message(Command("cancel"), TaskStates.waiting_for_content)
@router.message(Command("cancel"), TaskStates.waiting_for_points)
async def task_cancel_cmd(message: Message, state: FSMContext):
    await message.answer("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()
    task_data.pop(message.from_user.id, None)

@router.message(Command("list_users"))
async def list_users(message: Message):
    """List top users"""
    if not is_super_admin(message.from_user.id):
        return
    
    if message.chat.type != "private":
        await message.answer("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
        return
    
    async with aiosqlite.connect(DATABASE_PATH) as db:
        async with db.execute(
            "SELECT user_id, username, points, streak FROM users ORDER BY points DESC LIMIT 20"
        ) as cursor:
            users = await cursor.fetchall()
    
    if not users:
        await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ.")
        return
    
    text = "<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
    for uid, uname, pts, streak in users:
        text += f"<code>{uid}</code> @{uname or '–ë–µ–∑ –Ω–∏–∫–∞'} ‚Äî {pts:.1f} –±–∞–ª–ª–æ–≤, {streak}üî•\n"
    
    await message.answer(text)

@router.message(Command("addpoints"))
async def add_points_cmd(message: Message):
    """Add points to user"""
    if not is_super_admin(message.from_user.id):
        return
    
    if message.chat.type != "private":
        await message.answer("–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
        return
    
    args = message.text.split()
    if len(args) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /addpoints @username 100")
        return
    
    username, amount = args[1], args[2]
    try:
        amount = float(amount)
        async with aiosqlite.connect(DATABASE_PATH) as db:
            async with db.execute(
                "SELECT user_id FROM users WHERE username = ?",
                (username.lstrip("@"),)
            ) as cursor:
                user = await cursor.fetchone()
        
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        await add_points(user[0], amount)
        await message.answer(f"‚úÖ {amount} –±–∞–ª–ª–æ–≤ –Ω–∞—á–∏—Å–ª–µ–Ω–æ @{username}")
        await log_admin_action(message.from_user.id, "addpoints", f"@{username}: {amount}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

@router.message(Command("setstreak"))
async def set_streak_cmd(message: Message):
    """Set user streak"""
    if not is_super_admin(message.from_user.id):
        return
    
    if message.chat.type != "private":
        await message.answer("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–∏–∏ –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
        return
    
    args = message.text.split()
    if len(args) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setstreak @username 10")
        return
    
    username, days = args[1], args[2]
    try:
        days = int(days)
        async with aiosqlite.connect(DATABASE_PATH) as db:
            await db.execute(
                "UPDATE users SET streak = ? WHERE username = ?",
                (days, username.lstrip("@"))
            )
            await db.commit()
        await message.answer(f"‚úÖ –°–µ—Ä–∏—è –¥–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {days}")
        await log_admin_action(message.from_user.id, "setstreak", f"@{username}: {days}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

@router.message(Command("setsub"))
async def set_sub_cmd(message: Message):
    """Update subscription URL"""
    if not is_super_admin(message.from_user.id):
        return
    
    if message.chat.type != "private":
        await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
        return
    
    args = message.text.split(maxsplit=2)
    if len(args) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setsub type url")
        return
    
    sub_type, url = args[1], args[2]
    await update_subscription(sub_type, url, sub_type)
    await message.answer(f"‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ {sub_type} –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

@router.message(Command("maintenance"))
async def maintenance_cmd(message: Message):
    """Toggle maintenance mode"""
    if not is_super_admin(message.from_user.id):
        return
    
    if message.chat.type != "private":
        await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
        return
    
    args = message.text.split()
    if len(args) != 2 or args[1] not in ("on", "off"):
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /maintenance on | off")
        return
    
    flag_path = "maintenance.flag"
    if args[1] == "on":
        with open(flag_path, "w") as f:
            f.write("maintenance")
        await message.answer("üîß –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –í–ö–õ–Æ–ß–Å–ù!")
    else:
        import os
        if os.path.exists(flag_path):
            os.remove(flag_path)
        await message.answer("‚úÖ –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –í–´–ö–õ–Æ–ß–ï–ù!")

@router.message(Command("adminlog"))
async def admin_log_cmd(message: Message):
    if not is_super_admin(message.from_user.id):
        return
    if message.chat.type != "private":
        await message.answer("–ò—Å—Ç–æ—Ä–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
        return
    async with aiosqlite.connect(DATABASE_PATH) as db:
        async with db.execute(
            "SELECT admin_id, action, details, created_at FROM admin_logs ORDER BY id DESC LIMIT 20"
        ) as cursor:
            logs = await cursor.fetchall()
    if not logs:
        await message.answer("–õ–æ–≥ –ø—É—Å—Ç.")
        return
    text = "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–æ–≤:</b>\n\n"
    for admin_id, action, details, created_at in logs:
        text += f"<b>{created_at[:16]}</b> | <code>{admin_id}</code> | <b>{action}</b>\n{details or ''}\n\n"
    await message.answer(text)

@router.message(Command("removepoints"))
async def remove_points_cmd(message: Message):
    """Remove points from user"""
    if not is_super_admin(message.from_user.id):
        return
    if message.chat.type != "private":
        await message.answer("–ó–∞–±–æ—Ä –±–∞–ª–ª–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
        return
    args = message.text.split()
    if len(args) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /removepoints @username 100")
        return
    username, amount = args[1], args[2]
    try:
        amount = float(amount)
        async with aiosqlite.connect(DATABASE_PATH) as db:
            async with db.execute(
                "SELECT user_id FROM users WHERE username = ?",
                (username.lstrip("@"),)
            ) as cursor:
                user = await cursor.fetchone()
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        await add_points(user[0], -amount)
        await message.answer(f"‚úÖ {amount} –±–∞–ª–ª–æ–≤ —Å–Ω—è—Ç–æ —É @{username}")
        await log_admin_action(message.from_user.id, "removepoints", f"@{username}: -{amount}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

@router.message(Command("ban"))
async def ban_user_cmd(message: Message):
    """Ban user"""
    if not is_super_admin(message.from_user.id):
        return
    if message.chat.type != "private":
        await message.answer("–ë–∞–Ω –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
        return
    args = message.text.split()
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /ban @username")
        return
    username = args[1]
    async with aiosqlite.connect(DATABASE_PATH) as db:
        await db.execute(
            "UPDATE users SET is_banned = 1 WHERE username = ?",
            (username.lstrip("@"),)
        )
        await db.commit()
    await message.answer(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–±–∞–Ω–µ–Ω.")
    await log_admin_action(message.from_user.id, "ban", f"@{username}")

@router.message(Command("unban"))
async def unban_user_cmd(message: Message):
    """Unban user"""
    if not is_super_admin(message.from_user.id):
        return
    if message.chat.type != "private":
        await message.answer("–†–∞–∑–±–∞–Ω –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
        return
    args = message.text.split()
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /unban @username")
        return
    username = args[1]
    async with aiosqlite.connect(DATABASE_PATH) as db:
        await db.execute(
            "UPDATE users SET is_banned = 0 WHERE username = ?",
            (username.lstrip("@"),)
        )
        await db.commit()
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
    await log_admin_action(message.from_user.id, "unban", f"@{username}") 