from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from config.settings import POINTS_CONFIG, SUPER_ADMINS, REQUIRED_SUBSCRIPTIONS
from config.constants import WELCOME_MESSAGE, PHOTO_PHRASES, VIDEO_PHRASES, TEXT_PHRASES, ACHIEVEMENTS
from database.models import (
    add_user, get_user, add_points, get_top_users,
    add_achievement, get_user_achievements, get_current_task,
    get_subscriptions, update_check_in
)
from keyboards.keyboards import (
    get_main_keyboard, get_subscription_keyboard,
    get_referral_keyboard, get_donate_keyboard,
    get_task_keyboard, get_profile_keyboard,
    get_group_keyboard, get_admin_keyboard
)
import random
from datetime import datetime, timedelta
import re
from collections import defaultdict
from aiogram.utils.chat_action import ChatActionSender
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

router = Router()

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_last_message = defaultdict(datetime)  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
user_message_count = defaultdict(int)      # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥
user_message_history = defaultdict(list)   # –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
SPAM_THRESHOLD = 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥
SPAM_PERIOD = 60    # –ü–µ—Ä–∏–æ–¥ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
MESSAGE_HISTORY_SIZE = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–≤—Ç–æ—Ä–æ–≤

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞–Ω–∏–µ–º –¥–Ω—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
last_task_message = {}

@router.message(F.text == "‚úÖ CHECK-IN")
async def check_in(message: Message):
    """Handle daily check-in"""
    # –ó–∞–ø—Ä–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —á–µ–∫-–∏–Ω–∞ –≤ –ª–∏—á–∫–µ
    if message.chat.type == "private":
        await message.answer("–ß–µ–∫-–∏–Ω –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ!")
        return
    
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start")
        return
    
    points, streak, last_check_in, *_ = user
    now = datetime.now()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ 24-—á–∞—Å–æ–≤–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    if last_check_in:
        last_check = datetime.fromisoformat(last_check_in)
        time_diff = now - last_check
        if time_diff.total_seconds() < 24 * 3600:  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            next_check = last_check + timedelta(hours=24)
            await message.answer(
                f"‚è≥ –í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —á–µ–∫-–∏–Ω!\n–°–ª–µ–¥—É—é—â–∏–π —á–µ–∫-–∏–Ω –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ {next_check.strftime('%d.%m %H:%M')}")
            return
    
    # Add points and update streak
    points_to_add = POINTS_CONFIG["check_in"]["points"]
    await add_points(message.from_user.id, points_to_add)
    new_streak = streak + 1 if streak else 1
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–µ–∫-–∏–Ω–∞ –∏ —Å–µ—Ä–∏—é
    await update_check_in(message.from_user.id, new_streak)
    
    await message.answer(
        f"‚úÖ –ß–µ–∫-–∏–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω!\n+{points_to_add} –±–∞–ª–ª–æ–≤\nüî• –°–µ—Ä–∏—è: {new_streak} –¥–Ω–µ–π"
    )

@router.message(Command("start"))
async def cmd_start(message: Message):
    if message.chat.type == "private":
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–æ—Ç –≤–∞—à–µ –º–µ–Ω—é:\n\n"
            "‚úÖ CHECK-IN ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—Ç–º–µ—Ç–∫–∞\n"
            "üìã –ó–∞–¥–∞–Ω–∏–µ –¥–Ω—è ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–∏–µ\n"
            "üë§ –ü—Ä–æ—Ñ–∏–ª—å ‚Äî –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
            "üèÜ –¢–æ–ø ‚Äî —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            "ü§ù –†–µ—Ñ–µ—Ä–∞–ª ‚Äî –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π\n"
            "üíé –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è ‚Äî –≤–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
            "üí∏ –î–æ–Ω–∞—Ç ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç",
            reply_markup=get_main_keyboard()
        )
    else:
        await message.answer("–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤ –ª–∏—á–∫–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")

@router.message(Command("menu"))
async def cmd_menu(message: Message):
    if message.chat.type == "private":
        await message.answer(
            "–ú–µ–Ω—é:\n\n"
            "‚úÖ CHECK-IN ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—Ç–º–µ—Ç–∫–∞\n"
            "üìã –ó–∞–¥–∞–Ω–∏–µ –¥–Ω—è ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–∏–µ\n"
            "üë§ –ü—Ä–æ—Ñ–∏–ª—å ‚Äî –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
            "üèÜ –¢–æ–ø ‚Äî —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            "ü§ù –†–µ—Ñ–µ—Ä–∞–ª ‚Äî –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π\n"
            "üíé –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è ‚Äî –≤–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
            "üí∏ –î–æ–Ω–∞—Ç ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç",
            reply_markup=get_main_keyboard()
        )
    else:
        await message.answer("–ú–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")

@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message):
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start")
        return
    points, streak, last_check_in, last_task_date, tasks_today, is_banned = user
    text = (
        f"<b>üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n"
        f"–ë–∞–ª–ª—ã: <b>{points:.1f}</b>\n"
        f"–°–µ—Ä–∏—è –¥–Ω–µ–π: <b>{streak}</b>\n"
        f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: <b>{tasks_today}</b>\n"
    )
    await message.answer(text)

@router.message(F.text == "üèÜ –¢–æ–ø")
async def show_top(message: Message):
    top_users = await get_top_users(10)
    if not top_users:
        await message.answer("–¢–æ–ø –ø—É—Å—Ç.")
        return
    medals = ["ü•á", "ü•à", "ü•â"]
    text = "üèÜ <b>–¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b>\n\n"
    for i, (username, points) in enumerate(top_users, 1):
        name = f"@{username}" if username else "–ë–µ–∑ –Ω–∏–∫–∞"
        medal = medals[i-1] if i <= 3 else f"{i}."
        text += f"{medal} {name} ‚Äî <b>{points:.1f}</b> –±–∞–ª–ª–æ–≤\n"
    await message.answer(text, parse_mode="HTML")

@router.message(F.text == "üíé –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
async def show_achievements(message: Message):
    achievements = await get_user_achievements(message.from_user.id)
    if not achievements:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.")
        return
    ach_map = {a['id']: a for a in ACHIEVEMENTS}
    text = "<b>üíé –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n\n"
    for ach_id in achievements:
        ach = ach_map.get(ach_id)
        if ach:
            text += f"{ach['emoji']} <b>{ach['name']}</b> ‚Äî {ach['description']}\n"
    await message.answer(text)

@router.message(F.text == "ü§ù –†–µ—Ñ–µ—Ä–∞–ª")
async def show_referral(message: Message):
    bot_username = (await message.bot.me()).username
    ref_link = f"https://t.me/{bot_username}?start={message.from_user.id}"
    text = (
        f"<b>ü§ù –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n"
        f"{ref_link}\n\n"
        f"–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!"
    )
    await message.answer(text)

async def show_task(message: Message):
    task = await get_current_task()
    if not task:
        await message.answer("–°–∏—Å—É –≥–æ—Ç–æ–≤–∏—Ç –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–Ω—è! –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏.")
        return
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º –¥–Ω—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    prev_msg_id = last_task_message.get(message.from_user.id)
    if prev_msg_id:
        try:
            await message.bot.delete_message(message.chat.id, prev_msg_id)
        except Exception:
            pass
    sent = await message.answer(
        f"<b>üìã –ó–∞–¥–∞–Ω–∏–µ –¥–Ω—è:</b>\n\n{task}",
        reply_markup=get_task_keyboard()
    )
    last_task_message[message.from_user.id] = sent.message_id

@router.message(F.text == "üìã –ó–∞–¥–∞–Ω–∏–µ –¥–Ω—è")
async def show_task_button(message: Message):
    await show_task(message)

@router.callback_query(F.data == "complete_task")
async def complete_task_callback(callback: CallbackQuery):
    await callback.answer("–°–∏—Å—É —Å–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏—Ç –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ! –û–∂–∏–¥–∞–π—Ç–µ.", show_alert=True)

@router.message(F.text == "üí∏ –î–æ–Ω–∞—Ç")
async def show_donate(message: Message):
    await message.answer(
        "<b>üí∏ –ó–∞–¥–æ–Ω–∞—Ç—å —Å–µ–±–µ –Ω–∞ –±—É–¥—É—â–µ–µ!</b>\n\n"
        "–ö—É–ø–∏ Sisu ‚Äî —Ç–æ–∫–µ–Ω –±—É–¥—É—â–µ–≥–æ. –≠—Ç–æ —Ç–≤–æ–π –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –≤ –±—É–¥—É—â–µ–º!\n\n"
        "<a href='https://t.me/tontrade?start=HeeuA1fNBh'>–ö—É–ø–∏—Ç—å Sisu</a>",
        parse_mode="HTML",
        disable_web_page_preview=True
    )

@router.message(F.text == "‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥—ã")
async def show_commands(message: Message):
    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/menu ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/profile ‚Äî –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/top ‚Äî —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "/task ‚Äî –∑–∞–¥–∞–Ω–∏–µ –¥–Ω—è\n"
        "/referral ‚Äî –≤–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞\n"
        "/achievements ‚Äî –≤–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
        "/donate ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç"
    )

@router.message(Command("task"))
async def cmd_task(message: Message):
    await show_task(message)

@router.message(F.photo)
async def handle_photo(message: Message):
    user = await get_user(message.from_user.id)
    if not user:
        return
    points = POINTS_CONFIG["photo"]["points"]
    bonus = 0
    if message.caption:
        bonus = POINTS_CONFIG["photo"].get("with_caption", 0)
    total = points + bonus
    await add_points(message.from_user.id, total)
    phrase = random.choice(PHOTO_PHRASES)
    reply = f"<b>{message.from_user.full_name}</b>\n{phrase}\nüíé <b>+{total} –±–∞–ª–ª–æ–≤</b>"
    await message.reply(reply, parse_mode="HTML")

@router.message(F.video)
async def handle_video(message: Message):
    user = await get_user(message.from_user.id)
    if not user:
        return
    points = POINTS_CONFIG["video"]["points"]
    bonus = 0
    if message.caption:
        bonus = POINTS_CONFIG["video"].get("with_caption", 0)
    total = points + bonus
    await add_points(message.from_user.id, total)
    phrase = random.choice(VIDEO_PHRASES)
    reply = f"<b>{message.from_user.full_name}</b>\n{phrase}\nüíé <b>+{total} –±–∞–ª–ª–æ–≤</b>"
    await message.reply(reply, parse_mode="HTML")

@router.message(F.text & ~F.text.in_([
    "‚úÖ CHECK-IN", "üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üèÜ –¢–æ–ø", "üíé –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", "ü§ù –†–µ—Ñ–µ—Ä–∞–ª", "üìã –ó–∞–¥–∞–Ω–∏–µ –¥–Ω—è", "üí∏ –î–æ–Ω–∞—Ç", "‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥—ã"
]) & ~F.text.startswith("/"))
async def handle_text(message: Message):
    user = await get_user(message.from_user.id)
    if not user:
        return
    words = len(re.findall(r"\\w+", message.text))
    if words < POINTS_CONFIG["text"]["min_words"]:
        return
    points = POINTS_CONFIG["text"]["points"]
    bonus = 0
    if words >= POINTS_CONFIG["text"].get("bonus_words", 50):
        bonus = POINTS_CONFIG["text"].get("bonus_points", 0)
    total = points + bonus
    await add_points(message.from_user.id, total)
    phrase = random.choice(TEXT_PHRASES)
    reply = f"<b>{message.from_user.full_name}</b>\n{phrase}\nüíé <b>+{total} –±–∞–ª–ª–æ–≤</b>"
    await message.reply(reply, parse_mode="HTML") 